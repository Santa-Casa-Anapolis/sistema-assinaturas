const { Client } = require('ldapts');
const ldapConfig = require('./ldap-config');

/**
 * Classe para autentica√ß√£o LDAP com Active Directory usando ldapts
 */
class LDAPAuth {
  constructor() {
    this.client = null;
  }

  /**
   * Conecta ao servidor LDAP
   */
  async connect() {
    try {
      this.client = new Client({
        url: ldapConfig.url,
        timeout: ldapConfig.timeout,
        connectTimeout: ldapConfig.timeout
      });

      // A biblioteca ldapts conecta automaticamente, n√£o precisa chamar connect()
      console.log('‚úÖ Conectado ao servidor LDAP');
    } catch (error) {
      console.error('‚ùå Erro de conex√£o LDAP:', error.message);
      throw error;
    }
  }

  /**
   * Desconecta do servidor LDAP
   */
  async disconnect() {
    if (this.client) {
      try {
        await this.client.unbind();
        console.log('üîå Desconectado do servidor LDAP');
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao desconectar:', error.message);
      }
      this.client = null;
    }
  }

  /**
   * Faz bind com credenciais de usu√°rio t√©cnico
   */
  async bindWithServiceAccount() {
    try {
      await this.client.bind(ldapConfig.bindDN, ldapConfig.bindPassword);
      console.log('‚úÖ Bind do usu√°rio t√©cnico realizado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro no bind do usu√°rio t√©cnico:', error.message);
      throw new Error(`Erro na autentica√ß√£o do usu√°rio t√©cnico: ${error.message}`);
    }
  }

  /**
   * Busca o DN do usu√°rio pelo samaccountname
   */
  async findUserDN(username) {
    try {
      const searchOptions = {
        scope: 'sub',
        filter: `(${ldapConfig.loginAttribute}=${username})`,
        attributes: ldapConfig.searchAttributes
      };

      const { searchEntries } = await this.client.search(ldapConfig.baseDN, searchOptions);
      
      if (!searchEntries || searchEntries.length === 0) {
        console.log(`‚ùå Usu√°rio n√£o encontrado: ${username}`);
        throw new Error('Usu√°rio n√£o encontrado no Active Directory');
      }

      const entry = searchEntries[0];
      const userData = {
        dn: entry.dn,
        attributes: entry
      };

      console.log(`‚úÖ Usu√°rio encontrado: ${userData.dn}`);
      return userData;
    } catch (error) {
      console.error('‚ùå Erro na busca do usu√°rio:', error.message);
      throw new Error(`Erro na busca do usu√°rio: ${error.message}`);
    }
  }

  /**
   * Autentica o usu√°rio fazendo bind com suas credenciais
   */
  async authenticateUser(userDN, password) {
    try {
      // Validar se a senha √© uma string v√°lida
      if (!password || typeof password !== 'string') {
        console.error('‚ùå Senha inv√°lida:', typeof password);
        throw new Error('Senha inv√°lida ou credenciais incorretas');
      }

      console.log(`üîç Tipo da senha: ${typeof password}, Tamanho: ${password.length}`);
      console.log(`üîç UserDN: ${userDN}`);
      console.log(`üîç URL LDAP: ${ldapConfig.url}`);

      // Criar um novo cliente para autentica√ß√£o do usu√°rio
      console.log('üîß Criando novo cliente LDAP para autentica√ß√£o do usu√°rio...');
      const userClient = new Client({
        url: ldapConfig.url,
        timeout: ldapConfig.timeout,
        connectTimeout: ldapConfig.timeout
      });

      console.log('üîß Cliente LDAP criado, tentando fazer bind...');
      
      try {
        // A biblioteca ldapts conecta automaticamente quando faz o bind
        await userClient.bind(userDN, password);
        console.log('‚úÖ Usu√°rio autenticado com sucesso');
        return true;
      } catch (bindError) {
        console.error('‚ùå Erro espec√≠fico no bind:', bindError.message);
        console.error('‚ùå Stack trace:', bindError.stack);
        throw bindError;
      } finally {
        // Sempre tentar desconectar o cliente do usu√°rio
        console.log('üîß Tentando desconectar cliente do usu√°rio...');
        try {
          await userClient.unbind();
          console.log('‚úÖ Cliente do usu√°rio desconectado');
        } catch (unbindError) {
          console.log('‚ö†Ô∏è Erro ao desconectar cliente do usu√°rio:', unbindError.message);
        }
      }
    } catch (error) {
      console.error('‚ùå Erro na autentica√ß√£o do usu√°rio:', error.message);
      console.error('‚ùå Stack trace completo:', error.stack);
      throw new Error('Senha inv√°lida ou credenciais incorretas');
    }
  }

  /**
   * M√©todo principal de autentica√ß√£o
   * @param {string} username - samaccountname do usu√°rio
   * @param {string} password - senha do usu√°rio
   * @returns {Object} - Dados do usu√°rio autenticado
   */
  async authenticate(username, password) {
    try {
      console.log(`üîê Iniciando autentica√ß√£o LDAP para: ${username}`);
      console.log(`üîç Tipo da senha: ${typeof password}, Tamanho: ${password ? password.length : 'null'}`);
      console.log(`üîç Configura√ß√£o LDAP:`, {
        url: ldapConfig.url,
        baseDN: ldapConfig.baseDN,
        bindDN: ldapConfig.bindDN,
        loginAttribute: ldapConfig.loginAttribute
      });
      
      // 1. Conectar ao LDAP
      console.log('üì° Passo 1: Conectando ao servidor LDAP...');
      await this.connect();
      
      // 2. Fazer bind com usu√°rio t√©cnico
      console.log('üîë Passo 2: Fazendo bind com usu√°rio t√©cnico...');
      await this.bindWithServiceAccount();
      
      // 3. Buscar o DN do usu√°rio
      console.log('üîç Passo 3: Buscando DN do usu√°rio...');
      const userData = await this.findUserDN(username);
      console.log('üìã Dados do usu√°rio encontrados:', {
        dn: userData.dn,
        attributes: userData.attributes
      });
      
      // 4. Autenticar o usu√°rio com suas credenciais
      console.log('üîê Passo 4: Autenticando usu√°rio com credenciais...');
      await this.authenticateUser(userData.dn, password);
      
      // 5. Retornar dados do usu√°rio
      const userInfo = {
        username: username,
        dn: userData.dn,
        displayName: userData.attributes.displayName || userData.attributes.cn,
        email: userData.attributes.mail,
        department: userData.attributes.department,
        title: userData.attributes.title,
        samaccountname: userData.attributes.samaccountname
      };

      console.log('‚úÖ Autentica√ß√£o LDAP bem-sucedida');
      console.log('üìä Informa√ß√µes do usu√°rio autenticado:', userInfo);
      return userInfo;

    } catch (error) {
      console.error('‚ùå Falha na autentica√ß√£o LDAP:', error.message);
      console.error('‚ùå Stack trace completo:', error.stack);
      throw error;
    } finally {
      // Sempre desconectar
      console.log('üîå Desconectando do servidor LDAP...');
      await this.disconnect();
    }
  }
}

/**
 * Fun√ß√£o auxiliar para autentica√ß√£o LDAP
 * @param {string} username - samaccountname do usu√°rio
 * @param {string} password - senha do usu√°rio
 * @returns {Object} - Dados do usu√°rio autenticado
 */
async function authenticateLDAP(username, password) {
  const ldapAuth = new LDAPAuth();
  return await ldapAuth.authenticate(username, password);
}

module.exports = {
  LDAPAuth,
  authenticateLDAP
};